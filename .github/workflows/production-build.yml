name: Build and Push Docker Images - Production

on:
  push:
    tags:
      - 'v*'
  workflow_call:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if version unchanged'
        required: false
        default: false
        type: boolean
    outputs:
      image-tags-json:
        description: 'All container image tags as JSON'
        value: ${{ jobs.build-images.outputs.image-tags-json }}
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if version unchanged'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  build-images:
    runs-on: ubuntu-latest
    environment: production
    outputs:
      image-tags-json: ${{ steps.build.outputs.image-tags-json }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup CDK Environment
        uses: ./.github/actions/setup-cdk
        with:
          aws-role-arn: ${{ secrets.PROD_AWS_ROLE_ARN }}
          aws-region: ${{ secrets.PROD_AWS_REGION }}
          role-session-name: GitHubActions-DockerBuild
      
      - name: Get ECR Repository
        id: ecr
        run: |
          # Get ECR repository ARN from BaseInfra exports
          ECR_REPO_ARN=$(aws cloudformation describe-stacks \
            --stack-name TAK-${{ vars.PROD_STACK_NAME }}-BaseInfra \
            --query 'Stacks[0].Outputs[?OutputKey==`EcrEtlTasksRepoArnOutput`].OutputValue' \
            --output text)
          
          if [[ -z "$ECR_REPO_ARN" ]]; then
            echo "ERROR: ECR repository ARN not found in BaseInfra stack outputs"
            exit 1
          fi
          
          # Extract repository name from ARN and build URI
          ECR_REPO_NAME=$(echo $ECR_REPO_ARN | cut -d'/' -f2)
          ECR_REPO_URI="${{ secrets.PROD_AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.PROD_AWS_REGION }}.amazonaws.com/${ECR_REPO_NAME}"
          
          echo "ecr-repo-uri=$ECR_REPO_URI" >> $GITHUB_OUTPUT
          echo "ecr-repo-name=$ECR_REPO_NAME" >> $GITHUB_OUTPUT
          echo "Using ECR repository: $ECR_REPO_URI"
      
      - name: Discover Enabled Containers
        id: containers
        run: |
          # Get all enabled containers dynamically
          CONTAINERS=$(jq -r '.context["prod"].containers | to_entries[] | select(.value.enabled == true) | .key' cdk.json)
          echo "enabled-containers<<EOF" >> $GITHUB_OUTPUT
          echo "$CONTAINERS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Enabled containers:"
          echo "$CONTAINERS"
      
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.PROD_AWS_REGION }} | \
            docker login --username AWS --password-stdin \
            ${{ steps.ecr.outputs.ecr-repo-uri }}
      
      - name: Build and Push Container Images
        id: build
        run: |
          ECR_REPO_NAME="${{ steps.ecr.outputs.ecr-repo-name }}"
          ECR_REPO_URI="${{ steps.ecr.outputs.ecr-repo-uri }}"
          
          # Initialize JSON object for image tags
          IMAGE_TAGS_JSON="{}"
          
          # Build each enabled container
          while IFS= read -r container; do
            if [[ -z "$container" ]]; then continue; fi
            
            # Get version from cdk.json
            VERSION=$(jq -r ".context[\"prod\"].containers[\"$container\"].imageTag" cdk.json)
            
            # Generate tag
            if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
              TIMESTAMP=$(date +%Y%m%d-%H%M%S)
              TAG="$container-${TIMESTAMP}"
            else
              TAG="$container-${VERSION}"
            fi
            
            # Check if image already exists
            if aws ecr describe-images --repository-name $ECR_REPO_NAME --image-ids imageTag=$TAG >/dev/null 2>&1; then
              echo "âœ… $container image already exists, skipping build"
            else
              echo "ðŸ”¨ Building $container image"
              docker build --platform linux/amd64 -t $ECR_REPO_URI:$TAG ./$container
              docker push $ECR_REPO_URI:$TAG
              echo "âœ… $container image pushed"
            fi
            
            # Add to JSON object
            IMAGE_TAGS_JSON=$(echo $IMAGE_TAGS_JSON | jq --arg key "$container" --arg value "$TAG" '. + {($key): $value}')
            
          done <<< "${{ steps.containers.outputs.enabled-containers }}"
          
          # Output JSON for deploy workflows (compact format for GitHub Actions)
          COMPACT_JSON=$(echo $IMAGE_TAGS_JSON | jq -c .)
          echo "image-tags-json=$COMPACT_JSON" >> $GITHUB_OUTPUT
          echo "Built image tags: $COMPACT_JSON"
          

      
      - name: Output Image Information
        run: |
          echo "âœ… Successfully built and pushed Docker images:"
          echo '${{ steps.build.outputs.image-tags-json }}' | jq -r 'to_entries[] | "ðŸ“¦ \(.key): \(.value)"'
          echo ""
          echo "ðŸš€ To deploy with these images, use:"
          echo "npm run cdk deploy -- --context usePreBuiltImages=true --context imageTagsJson='${{ steps.build.outputs.image-tags-json }}'"